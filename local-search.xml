<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Redission tryLock</title>
    <link href="/2024/05/28/Redission-tryLock/"/>
    <url>/2024/05/28/Redission-tryLock/</url>
    
    <content type="html"><![CDATA[<h1 id="Redisson-的-tryLock"><a href="#Redisson-的-tryLock" class="headerlink" title="Redisson 的 tryLock"></a>Redisson 的 tryLock</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(<span class="hljs-type">long</span> waitTime, <span class="hljs-type">long</span> leaseTime, TimeUnit unit)</span><br></code></pre></td></tr></table></figure><p>在 waitTime 时间范围内尝试获取锁, 如果获取到锁, 设置过期时间 leaseTime</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedissonLock</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RedissonBaseLock</span> &#123;<br>    <span class="hljs-comment">// 在waitTime时间范围内尝试获取锁，如果获取到锁，则设置锁过期时间leaseTime</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(<span class="hljs-type">long</span> waitTime, <span class="hljs-type">long</span> leaseTime, TimeUnit unit)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> unit.toMillis(waitTime);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">threadId</span> <span class="hljs-operator">=</span> Thread.currentThread().getId();<br>        <span class="hljs-comment">// 第一步：尝试获取锁</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">ttl</span> <span class="hljs-operator">=</span> tryAcquire(waitTime, leaseTime, unit, threadId);<br>        <span class="hljs-comment">// ttl为空说明获取到了锁</span><br>        <span class="hljs-keyword">if</span> (ttl == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <br>        <span class="hljs-comment">// 判断尝试获取锁是否超过waitTime</span><br>        time -= System.currentTimeMillis() - current;<br>        <span class="hljs-keyword">if</span> (time &lt;= <span class="hljs-number">0</span>) &#123;<br>            acquireFailed(waitTime, unit, threadId);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <br>        <span class="hljs-comment">// 第二步：订阅解锁消息通知</span><br>        current = System.currentTimeMillis();<br>        <span class="hljs-comment">// 订阅锁释放</span><br>        RFuture&lt;RedissonLockEntry&gt; subscribeFuture = subscribe(threadId);<br>        <span class="hljs-comment">// 等待锁释放消息，等待时间超过waitTime，获取锁失败</span><br>        <span class="hljs-keyword">if</span> (!subscribeFuture.await(time, TimeUnit.MILLISECONDS)) &#123;<br>            <span class="hljs-comment">// 如果订阅解锁Future在执行中，等任务执行完后取消订阅锁释放</span><br>            <span class="hljs-keyword">if</span> (!subscribeFuture.cancel(<span class="hljs-literal">false</span>)) &#123;<br>                subscribeFuture.onComplete((res, e) -&gt; &#123;<br>                    <span class="hljs-keyword">if</span> (e == <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-comment">// 取消订阅解锁通知</span><br>                        unsubscribe(subscribeFuture, threadId);<br>                    &#125;<br>                &#125;);<br>            &#125;<br>            acquireFailed(waitTime, unit, threadId);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 判断尝试获取锁是否超过waitTime</span><br>            time -= System.currentTimeMillis() - current;<br>            <span class="hljs-keyword">if</span> (time &lt;= <span class="hljs-number">0</span>) &#123;<br>                acquireFailed(waitTime, unit, threadId);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        <br>            <span class="hljs-comment">// 第三步：自旋尝试获取锁</span><br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-type">long</span> <span class="hljs-variable">currentTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>                <span class="hljs-comment">// 1、尝试获取锁(下文会详细解析此方法)</span><br>                ttl = tryAcquire(waitTime, leaseTime, unit, threadId);<br>                <span class="hljs-comment">// ttl为空说明获取到了锁</span><br>                <span class="hljs-keyword">if</span> (ttl == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br><br>                <span class="hljs-comment">// 判断尝试获取锁是否超过waitTime</span><br>                time -= System.currentTimeMillis() - currentTime;<br>                <span class="hljs-keyword">if</span> (time &lt;= <span class="hljs-number">0</span>) &#123;<br>                    acquireFailed(waitTime, unit, threadId);<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br><br>                <span class="hljs-comment">// 等待锁释放（信号量控制）</span><br>                currentTime = System.currentTimeMillis();<br>                <span class="hljs-keyword">if</span> (ttl &gt;= <span class="hljs-number">0</span> &amp;&amp; ttl &lt; time) &#123;<br>                    <span class="hljs-comment">// 尝试获取信号量</span><br>                    subscribeFuture.getNow().getLatch().tryAcquire(ttl, TimeUnit.MILLISECONDS);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    subscribeFuture.getNow().getLatch().tryAcquire(time, TimeUnit.MILLISECONDS);<br>                &#125;<br><br>                <span class="hljs-comment">// 判断尝试获取锁是否超过waitTime</span><br>                time -= System.currentTimeMillis() - currentTime;<br>                <span class="hljs-keyword">if</span> (time &lt;= <span class="hljs-number">0</span>) &#123;<br>                    acquireFailed(waitTime, unit, threadId);<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 第四步：取消解锁订阅</span><br>            unsubscribe(subscribeFuture, threadId);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>主要分为以下四步</p><ul><li>tryAcquire 尝试获取锁, 获取到返回 true</li><li>获取不到说明锁被占用了, 订阅结果消息通知</li><li>收到消息解锁通知, 自旋获取锁, 直到 waitTime 获取锁失败</li><li>不论是否获取锁成功, 取消解锁消息订阅</li></ul><p>tryAcquire 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Long <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">long</span> waitTime, <span class="hljs-type">long</span> leaseTime, TimeUnit unit, <span class="hljs-type">long</span> threadId)</span> &#123;<br>    <span class="hljs-keyword">return</span> get(tryAcquireAsync(waitTime, leaseTime, unit, threadId));<br>&#125;<br><br><span class="hljs-keyword">private</span> &lt;T&gt; RFuture&lt;Long&gt; <span class="hljs-title function_">tryAcquireAsync</span><span class="hljs-params">(<span class="hljs-type">long</span> waitTime, <span class="hljs-type">long</span> leaseTime, TimeUnit unit, <span class="hljs-type">long</span> threadId)</span> &#123;<br>    RFuture&lt;Long&gt; ttlRemainingFuture;<br>    <span class="hljs-keyword">if</span> (leaseTime != -<span class="hljs-number">1</span>) &#123;<br>        ttlRemainingFuture = tryLockInnerAsync(waitTime, leaseTime, unit, threadId, RedisCommands.EVAL_LONG);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 这里需要注意的是leaseTime == -1，会触发redisson看门狗机制</span><br>        ttlRemainingFuture = tryLockInnerAsync(waitTime, internalLockLeaseTime,<br>                TimeUnit.MILLISECONDS, threadId, RedisCommands.EVAL_LONG);<br>    &#125;<br>    ttlRemainingFuture.onComplete((ttlRemaining, e) -&gt; &#123;<br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 获取锁成功</span><br>        <span class="hljs-keyword">if</span> (ttlRemaining == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (leaseTime != -<span class="hljs-number">1</span>) &#123;<br>                internalLockLeaseTime = unit.toMillis(leaseTime);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 锁自动续时（看门狗机制）触发条件leaseTime == -1</span><br>                scheduleExpirationRenewal(threadId);<br>            &#125;<br>        &#125;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> ttlRemainingFuture;<br>&#125;<br></code></pre></td></tr></table></figure><p>tryLockInnerAsync 里面是尝试获取分布式锁的 lua 脚本<br>scheduleExpirationRenewal 锁自动续时, 看门狗机制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;T&gt; RFuture&lt;T&gt; <span class="hljs-title function_">tryLockInnerAsync</span><span class="hljs-params">(<span class="hljs-type">long</span> waitTime, <span class="hljs-type">long</span> leaseTime, TimeUnit unit, <span class="hljs-type">long</span> threadId, RedisStrictCommand&lt;T&gt; command)</span> &#123;<br>    <span class="hljs-keyword">return</span> evalWriteAsync(getRawName(), LongCodec.INSTANCE, command,<br>            <span class="hljs-comment">// 如果key一开始就不存在，则直接创建一个key</span><br>            <span class="hljs-string">&quot;if (redis.call(&#x27;exists&#x27;, KEYS[1]) == 0) then &quot;</span> +<br>                    <span class="hljs-string">&quot;redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +<br>                    <span class="hljs-string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +<br>                    <span class="hljs-string">&quot;return nil; &quot;</span> +<br>                    <span class="hljs-string">&quot;end; &quot;</span> +<br>                    <span class="hljs-comment">// 这里是重入锁的实现，同一个线程多次获取锁只需要在value加1即可，value相当于一个加锁计数器</span><br>                    <span class="hljs-string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[2]) == 1) then &quot;</span> +<br>                    <span class="hljs-string">&quot;redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +<br>                    <span class="hljs-string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +<br>                    <span class="hljs-string">&quot;return nil; &quot;</span> +<br>                    <span class="hljs-string">&quot;end; &quot;</span> +<br>                    <span class="hljs-comment">// 有其他线程持有锁，加锁失败，返回锁过期时间</span><br>                    <span class="hljs-string">&quot;return redis.call(&#x27;pttl&#x27;, KEYS[1]);&quot;</span>,<br>            Collections.singletonList(getRawName()), unit.toMillis(leaseTime), getLockName(threadId));<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>加锁的 key 不存在就创建一个 redis hash key, field(当前线程 id), value(加锁次数)</li><li>有线程持有锁并且未解锁, 其他线程无法获取到锁</li><li>加锁成功返回 null, 加锁失败返回过期时间</li></ol><p>锁过期时间自动续费</p><ol><li>锁过期自动续费的触发条件为 tryLock 设置的锁到期时间为-1</li><li>自动续费的原理是创建一个定时任务, 每 internalLockLeaseTime &#x2F; 3 时触发一次, 如果发现持有锁未释放, 把锁过期时间更新为 internalLockLeaseTime(默认为 30s)</li><li>锁过期时间更新后, 再次递归调用 renewExpiration 创建下一次定时任务</li></ol><p>前面 tryLock 方法的订阅解锁消息通知是在 unlock 的时候发起的<br>unlockAsync 方法内部调用 lua 脚本, 调用 publish 推送解锁消息</p><p>Redis 的 publish</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs redis">publish channel message<br></code></pre></td></tr></table></figure><ul><li>channel 指定要发布消息的频道</li><li>message 要发布的消息内容<br>在 tryLock 和 unLock 中, 他们的 channel 是线程 id</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>源码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多线程</title>
    <link href="/2024/05/26/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/2024/05/26/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="Runnable-和-Callable-有什么区别"><a href="#Runnable-和-Callable-有什么区别" class="headerlink" title="Runnable 和 Callable 有什么区别"></a>Runnable 和 Callable 有什么区别</h2><ul><li>Runnable 的 run 方法没有返回值, Callable 的 call 方法有</li><li>Callable 的 call 方法是个泛型</li><li>Runnable 的 run 方法不能抛异常, Callable 的 call 方法可以</li></ul><h2 id="wait-和-sleep-方法有什么区别"><a href="#wait-和-sleep-方法有什么区别" class="headerlink" title="wait 和 sleep 方法有什么区别"></a>wait 和 sleep 方法有什么区别</h2><ul><li>归属不同: wait 方法是 Object 类中的, sleep 方法是 Thread 的静态方法</li><li>醒来时机不同: sleep(long) 和 wait(long) 都会在等待相应毫秒后醒来, wait 方法可以被 notify 唤醒</li><li>锁特性不同: wait 方法必须配合Synchronized 使用, sleep 无此限制<ul><li>wait 方法执行后会释放锁对象, 允许其他线程获得锁(我放弃 CPU, 你们可以用)</li><li>sleep 如果在 Synchronized 代码块中执行, 不会释放锁对象(我放弃 CPU, 你们也不能用)</li></ul></li></ul><h2 id="Synchronized-底层原理"><a href="#Synchronized-底层原理" class="headerlink" title="Synchronized 底层原理"></a>Synchronized 底层原理</h2><h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><ul><li>在 1.7 版本中 ConcurrentHashMap 是用 数组 + 链表的数据结构实现的<ul><li>数组又分大数组 Segment 和小数组 HashEntry (大数组可以理解为 MySQL 的数据库, 小数组可以理解为表, 每个数组可以存储多条数据, 用链表连接)</li><li>它是基于 ReentrantLock 实现加锁和释放锁的操作, 锁的粒度为 Segment</li></ul></li><li>在 1.8 版本中用的是 数组 + 链表 + 红黑树的数据结构实现的<ul><li>用的是 CAS + volatile 或 Synchronized 方式保证线程安全</li><li>添加元素首先会判断容器是否为空, 如果为空则用 volatile + CAS 初始化</li><li>容器不为空则根据存储的元素计算位置是否为空, 为空用 CAS 设置节点</li><li>不为空则使用 Synchronized 加锁</li></ul></li></ul><h2 id="JMM-内存结构"><a href="#JMM-内存结构" class="headerlink" title="JMM 内存结构"></a>JMM 内存结构</h2><h2 id="介绍一下volatile-关键字"><a href="#介绍一下volatile-关键字" class="headerlink" title="介绍一下volatile 关键字"></a>介绍一下volatile 关键字</h2><ul><li>是用来修饰变量的</li><li>被其修饰的变量在修改后可以立即同步到主内存, 每次使用之前都是从主内存读取, 因此 volatile 可以保证可见性</li><li>volatile 可以禁止指令重排序, 被 volatile 修饰的变量操作, 会严格按照代码顺序执行</li></ul><h2 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h2><h2 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h2><ul><li>抽象队列同步器</li><li>内部维护了一个先进先出的双向队列, 队列中存储的是排队的线程</li><li>AQS 内部有一个属性 state, 相当于资源, 默认是 0, 当有一个线程成功修改 state 为 1, 则当前线程就等于获取了资源</li><li>对 state 修改的时候用 CAS 操作, 保证多个线程修改情况下的原子性</li></ul><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><h2 id="线程池参数"><a href="#线程池参数" class="headerlink" title="线程池参数"></a>线程池参数</h2><h2 id="用线程池有什么好处"><a href="#用线程池有什么好处" class="headerlink" title="用线程池有什么好处"></a>用线程池有什么好处</h2><ul><li>不用反复创建收回线程所需要的资源</li><li>系统的响应速度更快</li><li>更加合理利用 CPU 资源</li><li>可以统一管理资源</li></ul><h2 id="线程池的创建方法"><a href="#线程池的创建方法" class="headerlink" title="线程池的创建方法"></a>线程池的创建方法</h2><ul><li>ThreadPoolExecutor 构造函数</li><li>Executors 工具类</li></ul><h2 id="什么时候使用线程池"><a href="#什么时候使用线程池" class="headerlink" title="什么时候使用线程池"></a>什么时候使用线程池</h2><ul><li>当需要频繁创建和销毁线程的时候</li><li>常量池的参数配置<ul><li>快速响应用户请求, 用户发起试试请求, 服务追求响应时间, 比如一个用户要查看商品信息, 那么响应越快越好, 所以这种场景不应该设置队列去缓存并发任务, 调高 corePoolSize 和 maxPoolSize 尽可能创造多的线程执行任务</li><li>批处理操作, 离线计算大量任务, 比如统计报表, 这种情况下, 任务量巨大不需要瞬时完成, 也就是吞吐量优先, 所以应该设置队列去缓冲并发任务</li></ul></li></ul><h2 id="notify-和-wait"><a href="#notify-和-wait" class="headerlink" title="notify 和 wait"></a>notify 和 wait</h2><ul><li>wait 和 notify 均依赖于锁, 且锁的对象必须是同一个对象, 否则无法执行唤醒</li><li>notify 唤醒是随机唤醒一个线程, 唤醒的范为是同一锁对象, 所有 wait 的线程</li></ul><p>notify 同一依赖于锁, 必须在同步快中执行, 执行之后会立刻释放锁吗?</p><ul><li>notify 在执行后不会立即唤醒, 而是等到 notify 同步块执行完之后才会去执行唤醒</li></ul><h2 id="wait-notify-和-await-signal-关系"><a href="#wait-notify-和-await-signal-关系" class="headerlink" title="wait&#x2F;notify 和 await&#x2F;signal 关系"></a>wait&#x2F;notify 和 await&#x2F;signal 关系</h2><ul><li>wait&#x2F;notify <ul><li>基于 Synchronized 实现的</li><li>无法控制唤醒谁, 随机唤醒</li></ul></li><li>await&#x2F;signal <ul><li>基于 Lock 实现的</li><li>使用 Condition 对象可以细粒度低控制线程的等待和唤醒</li></ul></li></ul><h2 id="Executors-工具类提供的四个线程池子"><a href="#Executors-工具类提供的四个线程池子" class="headerlink" title="Executors 工具类提供的四个线程池子"></a>Executors 工具类提供的四个线程池子</h2><ul><li><code>newSingleThreadExecutor()</code> 用于需要保证任务按顺序执行的场景<ul><li>corePoolSize: 1</li><li>maximumPoolSize: 1</li><li>阻塞队列: LinkedBlockingQueue 大小是 Integer.MAX_VALUE</li></ul></li><li><code>newFixedThreadPool(int nThreads)</code> 用于负载稳定、任务量恒定的场景<ul><li>corePoolSize: nThreads</li><li>maximumPoolSize: nThreads</li><li>阻塞队列: LinkedBlockingQueue 大小是 Integer.MAX_VALUE</li></ul></li><li><code>newCachedThreadPool()</code> 适用于执行大量短期异步任务的场景，能高效地利用系统资源<ul><li>corePoolSize: 0</li><li>maximumPoolSize: Integer.MAX_VALUE</li><li>阻塞队列: 大小为 0</li></ul></li><li><code>ScheduledThreadPoolExecutor(int corePoolSize)</code> 用于需要定时或周期性执行任务的场景<ul><li>corePoolSize: 0</li><li>maximumPoolSize: Integer.MAX_VALUE</li><li>阻塞队列: 大小无界, 按照延迟的时间长短对任务进行排序</li></ul></li></ul><h2 id="shutdown-和-shutdownNow"><a href="#shutdown-和-shutdownNow" class="headerlink" title="shutdown() 和 shutdownNow()"></a>shutdown() 和 shutdownNow()</h2><ul><li>shutdown(): 关闭线程池, 线程池的状态变为 SHUTDOWN, 线程池不再接受新任务, 但是队列里的任务得执行完毕</li><li>shutdownNow(): 关闭线程池, 线程池的状态变为 STOP, 线程池会终止当前正在运行的任务, 并停止处理排队的任务并返回正在等待执行的 List</li></ul><h2 id="isTerminated-和-isShutdown"><a href="#isTerminated-和-isShutdown" class="headerlink" title="isTerminated() 和 isShutdown()"></a>isTerminated() 和 isShutdown()</h2><ul><li>isShutdown(): 当调用 shutdown() 方法后返回 true</li><li>isTerminated: 当调用 shutdown() 方法后, 并执行完所有提交的任务后返回 true</li></ul><h2 id="如何正确使用线程池"><a href="#如何正确使用线程池" class="headerlink" title="如何正确使用线程池"></a>如何正确使用线程池</h2><ul><li>正确声明线程池, 用 ThreadExecutorPool 构造函数声明, 而不是 Executors 工具类(会有 OOM 的风险)</li><li>监测线程池运行状态, SpringBoot 的 Actuator 组件</li><li>建议不同业务使用不同的线程池</li><li>给线程池命名</li><li>别忘记关闭线程池</li><li>线程池尽量不要放耗时任务, 耗时任务用消息队列异步执行</li></ul><h2 id="动态调整线程池大小-美团"><a href="#动态调整线程池大小-美团" class="headerlink" title="动态调整线程池大小(美团)"></a>动态调整线程池大小(美团)</h2><ul><li>用 setCorePoolSize 调整核心线程池大小</li><li>用 setMaximumPoolSize 调整最大线程池大小</li><li>重写 LinkedBlockingQueue, 把里面的 capacity 字段的 final关键字去掉, 变为可变的</li></ul><h2 id="动态调整线程池大小-Nacos"><a href="#动态调整线程池大小-Nacos" class="headerlink" title="动态调整线程池大小(Nacos)"></a>动态调整线程池大小(Nacos)</h2><ul><li><code>@RefreshScope</code> 支持 Nacos 动态刷新</li><li><code>@Value(&quot;$&#123;max.size&#125;&quot;</code> 读取在 Nacos 配置的具体信息</li><li>配置监听, Nacos 配置变更时实时修改线程池配置</li></ul><h2 id="线程池中线程异常后-销毁还是复用"><a href="#线程池中线程异常后-销毁还是复用" class="headerlink" title="线程池中线程异常后, 销毁还是复用?"></a>线程池中线程异常后, 销毁还是复用?</h2><ul><li>使用 execute() 提交任务<ul><li>如果异常没有在任务内捕获, 那么该异常会导致当前线程终止, 控制台打印日志</li><li>线程池会检测到这种异常终止, 并创建一个新的线程来替换它, 从而保证配置的线程数不变</li></ul></li><li>使用 submit() 提交任务<ul><li>如果在执行中发生异常, 会封装在 submit() 返回的 <code>Future</code> 对象中</li><li>当调用 <code>Future.get()</code> 方法可以捕获到一个 <code>ExecutionException</code> </li><li>线程不会因异常终止, 会继续存在线程池中</li></ul></li></ul><h2 id="CompletableFuture"><a href="#CompletableFuture" class="headerlink" title="CompletableFuture"></a>CompletableFuture</h2><ul><li>是用来做多个任务的编排的, 规定任务前后执行顺序</li><li>Future 不支持异步任务的编排, 获取计算结果的 <code>get()</code> 方法为阻塞调用</li></ul><h2 id="Java-不同锁的实现和使用场景"><a href="#Java-不同锁的实现和使用场景" class="headerlink" title="Java 不同锁的实现和使用场景"></a>Java 不同锁的实现和使用场景</h2><ul><li><code>synchronized</code> 关键字<ul><li>可重入锁</li><li>非公平锁</li></ul></li><li><code>ReentrantLock</code><ul><li>可重入锁</li><li>AQS 队列</li><li>可以实现公平锁</li></ul></li><li><code>ReadWrite Lock</code> 读写锁<ul><li>读锁是共享锁, 读读不互斥, 获取到读锁的时候, 无法获取写锁</li><li>写锁是独占锁, 加上写锁的时候别的线程读写都不行</li></ul></li></ul><h2 id="CountDownLatch-类-倒计时器"><a href="#CountDownLatch-类-倒计时器" class="headerlink" title="CountDownLatch 类(倒计时器)"></a>CountDownLatch 类(倒计时器)</h2><ul><li>CountDownLatch 允许 count 个线程阻塞在一个地方, 直至所有线程的任务都执行完毕</li><li>典型用法<ul><li>某一个线程在开始运行前等待 n 个线程执行完毕: 将 CountDownLatch 的计数器初始化为 n, 每当一个任务线程执行完毕, 就将计数器 -1, 当计数器的值变为 0 时, 在 CountDownLatch 上 await() 的线程就被唤醒<ul><li>典型应用场景就是启动一个服务时, 主线程需要等待多个组件加载完成, 之后再继续执行</li></ul></li><li>实现多个线程开始执行任务的最大并发性: 强调的是多个线程在某一时刻同时开始执行, 类似于赛跑, 将多个线程放到起点, 同时开跑, 初始化一个共享的 CountDownLatch 对象, 将其计数器初始化为 1, 多个线程在开始执行任务前首先 <code>countdownLathch.await()</code> 当主线程调用 countDown() 时, 计数器变为 0, 多个线程被同时唤醒</li></ul></li></ul><h2 id="如何预防死锁"><a href="#如何预防死锁" class="headerlink" title="如何预防死锁"></a>如何预防死锁</h2><ul><li>破坏请求与保持条件: 一次性申请所有资源</li><li>破坏不可剥夺条件: 占用部分资源的线程去申请其他资源时, 如果申请不到, 主动释放他所占用的资源</li><li>破坏循环等待条件: 按照顺序申请资源, 释放资源反序释放</li></ul><h2 id="java-多线程通信"><a href="#java-多线程通信" class="headerlink" title="java 多线程通信"></a>java 多线程通信</h2><ul><li>锁</li><li><code>wait/notify</code></li><li><code>volatile</code> </li><li>管道</li><li><code>join</code></li><li><code>ThreadLocal</code></li></ul><h2 id="如何检测死锁"><a href="#如何检测死锁" class="headerlink" title="如何检测死锁"></a>如何检测死锁</h2><ul><li><code>jstack</code> 命令可以查看 JVM 线程栈和堆内存的情况, 如果有死锁, 通常会输出 <code>Found one Java-level deadlock</code> 字样</li><li>实际项目可以用 <code>top</code> 查看 CPU 占用情况, 出现死锁会导致 CPU 内存占用过高</li></ul><h2 id="锁升级"><a href="#锁升级" class="headerlink" title="锁升级"></a>锁升级</h2><ul><li>锁主要存在四种状态，依次是：无锁状态、偏向锁状态、轻量级锁状态、重量级锁状态，他们会随着竞争的激烈而逐渐升级。注意锁可以升级不可降级，这种策略是为了提高获得锁和释放锁的效率</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>八股</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
